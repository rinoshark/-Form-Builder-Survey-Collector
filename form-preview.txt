"use client"

import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Button } from "@/components/ui/button"
import type { FormElement } from "@/lib/types"

interface FormPreviewProps {
  field: FormElement
  value: any
  onChange: (value: any) => void
  disabled: boolean
}

export default function FormPreview({ field, value, onChange, disabled }: FormPreviewProps) {
  switch (field.type) {
    case "text":
    case "email":
    case "number":
    case "tel":
      return (
        <Input
          type={field.type}
          id={field.id}
          placeholder={field.placeholder}
          value={value || ""}
          onChange={(e) => onChange(e.target.value)}
          required={field.required}
          disabled={disabled}
        />
      )
    case "paragraph":
      return (
        <Textarea
          id={field.id}
          placeholder={field.placeholder}
          value={value || ""}
          onChange={(e) => onChange(e.target.value)}
          required={field.required}
          disabled={disabled}
        />
      )
    case "dropdown":
      return (
        <Select value={value} onValueChange={(val) => onChange(val)} disabled={disabled}>
          <SelectTrigger>
            <SelectValue placeholder={field.placeholder || field.label} />
          </SelectTrigger>
          <SelectContent>
            {field.options?.map((option, i) => (
              <SelectItem key={i} value={option}>
                {option}
              </SelectItem>
            ))}
          </SelectContent>
        </Select>
      )
    case "checkbox":
      return (
        <div className="flex items-center space-x-2">
          <input
            type="checkbox"
            id={`response-${field.id}`}
            checked={!!value}
            onChange={(e) => onChange(e.target.checked)}
            disabled={disabled}
            className="h-4 w-4 rounded border-gray-300 text-primary focus:ring-primary"
          />
          <label
            htmlFor={`response-${field.id}`}
            className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
          >
            {field.label}
          </label>
        </div>
      )
    case "radio":
      return (
        <div className="space-y-2">
          {field.options?.map((option, i) => (
            <div key={i} className="flex items-center space-x-2">
              <input
                type="radio"
                id={`${field.id}-${i}`}
                name={field.id}
                value={option}
                checked={value === option}
                onChange={() => onChange(option)}
                disabled={disabled}
                className="h-4 w-4 border-gray-300 text-primary focus:ring-primary"
              />
              <label
                htmlFor={`${field.id}-${i}`}
                className="text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70"
              >
                {option}
              </label>
            </div>
          ))}
        </div>
      )
    case "rating":
      return (
        <div className="flex items-center space-x-2">
          {Array.from({ length: (field.max || 5) - (field.min || 1) + 1 }, (_, i) => i + (field.min || 1)).map(
            (num) => (
              <Button
                key={num}
                variant={value === num.toString() ? "default" : "outline"}
                size="sm"
                onClick={() => onChange(num.toString())}
                disabled={disabled}
                className="h-10 w-10"
              >
                {num}
              </Button>
            ),
          )}
        </div>
      )
    case "date":
      return (
        <Input
          type="date"
          id={field.id}
          value={value || ""}
          onChange={(e) => onChange(e.target.value)}
          required={field.required}
          disabled={disabled}
        />
      )
    default:
      return null
  }
}
