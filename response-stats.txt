"use client"

import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import type { FormElement, FormResponse } from "@/lib/types"
import { useEffect, useState } from "react"

interface ResponseStatsProps {
  responses: FormResponse[]
  formFields: FormElement[]
}

interface FieldStats {
  type: string
  label: string
  data: Record<string, number>
}

export default function ResponseStats({ responses, formFields }: ResponseStatsProps) {
  const [stats, setStats] = useState<Record<string, FieldStats>>({})

  useEffect(() => {
    if (responses.length > 0 && formFields.length > 0) {
      const newStats: Record<string, FieldStats> = {}

      formFields.forEach((field) => {
        if (
          field.type === "rating" ||
          field.type === "dropdown" ||
          field.type === "checkbox" ||
          field.type === "radio"
        ) {
          newStats[field.id] = {
            type: field.type,
            label: field.label,
            data: {},
          }

          responses.forEach((response) => {
            const value = response.data[field.id]
            if (value !== undefined) {
              if (!newStats[field.id].data[value]) {
                newStats[field.id].data[value] = 0
              }
              newStats[field.id].data[value]++
            }
          })
        }
      })

      setStats(newStats)
    }
  }, [responses, formFields])

  if (Object.keys(stats).length === 0) {
    return null
  }

  return (
    <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
      {Object.entries(stats).map(([fieldId, fieldStats]) => (
        <Card key={fieldId}>
          <CardHeader className="pb-2">
            <CardTitle className="text-sm font-medium">{fieldStats.label}</CardTitle>
          </CardHeader>
          <CardContent>
            {fieldStats.type === "rating" && (
              <div className="space-y-2">
                {Object.entries(fieldStats.data).map(([value, count]) => (
                  <div key={value} className="flex items-center space-x-4">
                    <div className="w-8 text-right">{value}</div>
                    <div className="flex-1">
                      <div
                        className="bg-primary h-4 rounded"
                        style={{ width: `${(Number(count) / responses.length) * 100}%` }}
                      />
                    </div>
                    <div className="w-12 text-left text-muted-foreground">
                      {Math.round((Number(count) / responses.length) * 100)}% ({count})
                    </div>
                  </div>
                ))}
              </div>
            )}

            {(fieldStats.type === "dropdown" || fieldStats.type === "radio") && (
              <div className="space-y-2">
                {Object.entries(fieldStats.data).map(([value, count]) => (
                  <div key={value} className="flex items-center space-x-4">
                    <div className="w-24 truncate">{value}</div>
                    <div className="flex-1">
                      <div
                        className="bg-primary h-4 rounded"
                        style={{ width: `${(Number(count) / responses.length) * 100}%` }}
                      />
                    </div>
                    <div className="w-12 text-left text-muted-foreground">
                      {Math.round((Number(count) / responses.length) * 100)}% ({count})
                    </div>
                  </div>
                ))}
              </div>
            )}

            {fieldStats.type === "checkbox" && (
              <div className="space-y-2">
                <div className="flex items-center space-x-4">
                  <div className="w-24">Checked</div>
                  <div className="flex-1">
                    <div
                      className="bg-primary h-4 rounded"
                      style={{ width: `${(Number(fieldStats.data["true"] || 0) / responses.length) * 100}%` }}
                    />
                  </div>
                  <div className="w-12 text-left text-muted-foreground">
                    {Math.round((Number(fieldStats.data["true"] || 0) / responses.length) * 100)}% (
                    {fieldStats.data["true"] || 0})
                  </div>
                </div>
                <div className="flex items-center space-x-4">
                  <div className="w-24">Unchecked</div>
                  <div className="flex-1">
                    <div
                      className="bg-muted h-4 rounded"
                      style={{ width: `${(Number(fieldStats.data["false"] || 0) / responses.length) * 100}%` }}
                    />
                  </div>
                  <div className="w-12 text-left text-muted-foreground">
                    {Math.round((Number(fieldStats.data["false"] || 0) / responses.length) * 100)}% (
                    {fieldStats.data["false"] || 0})
                  </div>
                </div>
              </div>
            )}
          </CardContent>
        </Card>
      ))}
    </div>
  )
}
